{"version":3,"file":"foo.cjs","sources":["../../../AnalyticsCore/analytics/index.ts"],"sourcesContent":["// @ts-nocheck\n\nclass AnalyticsService {\n  network = undefined\n  options = {\n    url: 'http://default',\n  }\n\n  constructor(props) {\n    this.network = props.network\n  }\n\n  dispatchToNetwork = (data) => {\n    this.network.dispatch({\n      url: this.options.url,\n      data,\n    })\n  }\n}\n\nexport class InhouseService extends AnalyticsService {\n  options = {\n    url: 'http://inhouse',\n  }\n\n  dispatch = (data) => {\n    data.meta = {\n      sdk_source: 'web',\n    }\n\n    this.dispatchToNetwork(data)\n  }\n}\n\nexport class WoopraService extends AnalyticsService {\n  options = {\n    url: 'http://woopra',\n  }\n\n  dispatch = (data) => {\n    data.meta = {\n      sdk_source: 'web',\n    }\n\n    this.dispatchToNetwork(data)\n  }\n}\n\nclass AnalyticsInterface {\n  services = {}\n  options = {\n    mapEvent: undefined,\n  }\n\n  constructor(props) {\n    this.services = props.services || this.services\n    this.options = props.options || this.options // Combine?\n  }\n\n  dispatch = (eventData) => {\n    let serviceData\n\n    if (this.options.mapEvent) {\n      serviceData = this.options.mapEvent(eventData)\n    }\n\n    Object.keys(serviceData || this.services).map((serviceName) => {\n      let data = serviceData ? serviceData[serviceName] || eventData : eventData\n\n      if (!this.services[serviceName]) {\n        console.error('service can not be found')\n        return\n      }\n\n      this.services[serviceName].map((i) => {\n        data = typeof i === 'function' ? i(data) : i.dispatch(data)\n      })\n    })\n  }\n}\n\nexport class Analytics extends AnalyticsInterface {\n  sendEvent = (eventName: string, properties: Record<string, unknown>) => {\n    this.dispatch({\n      eventName,\n      properties,\n    })\n  }\n\n  sendScreenEvent = (\n    screenName: string,\n    properties: Record<string, unknown>\n  ) => {\n    this.dispatch({\n      screenName,\n      properties,\n    })\n  }\n}\n\nexport class ReactAnalytics {\n  analytics = undefined\n\n  constructor(analytics: Analytics) {\n    this.analytics = analytics\n  }\n\n  trackComponent = (Component, screenName: string) => {\n    this.analytics.sendScreenEvent(screenName, {})\n  }\n  appendToTracking = (Component, ancestorScreenNameHierarchy: string) => {\n    this.analytics.sendScreenEvent(ancestorScreenNameHierarchy, {})\n  }\n}\n"],"names":["AnalyticsService","options","url","_this2","dispatch","data","meta","sdk_source","dispatchToNetwork","props","network","undefined","_this","this"],"mappings":"4OAoBoCA,iDAClCC,QAAU,CACRC,IAAK,kBAFTC,EAKEC,SAAW,SAACC,GACVA,EAAKC,KAAO,CACVC,WAAY,OAGdJ,EAAKK,kBAAkBH,IAVSL,EAAAA,uFAAAA,GAZlC,SAAYS,mBALZC,aAAUC,EACVV,KAAAA,QAAU,CACRC,IAAK,uBAOPM,kBAAoB,SAACH,GACnBO,EAAKF,QAAQN,SAAS,CACpBF,IAAKU,EAAKX,QAAQC,IAClBG,KAAAA,KANFQ,KAAKH,QAAUD,EAAMC"}