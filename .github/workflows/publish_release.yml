name: Publish release

on:
  workflow_dispatch:
    inputs:
      npm_release_tag:
        description: 'NPM release tag'
        required: false
        type: string

# TODO: remove _DANNY onces ready for testing with prod aws
env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_DANNY }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_DANNY }}
  AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET_DANNY }}
  AWS_DEFAULT_REGION: 'eu-west-1'

jobs:
  deploy:
    runs-on: ubuntu-latest
    env: 
      NPM_PUBLISH_TAG: ${{ secrets.NPM_RELESE_TAG }}
    steps:
      - uses: actions/checkout@v2.3.4

        # Needed to be able to run `npm ci`. It fails if we try to install libraries from a github repo
        # e.g. "wpt": "git+https://github.com/Woopra/browser-tracker.git#v5.1.20",
      - name: Setup Git
        run: |
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"
          git config --global user.name "${{ github.actor }}"
          git config --global --add url."https://github.com/".insteadOf ssh://git@github.com/

      # - uses: actions/setup-node@v2
      #   with:
      #     node-version: '16.x'
      #     registry-url: 'https://registry.npmjs.org'

      # - name: Setup env
      #   run: |
      #     source ./release/githubActions/workflows.config
      #     echo "BASE_32_VERSION=${BASE_32_VERSION}" >> $GITHUB_ENV
      #     echo "RELEASE_VERSION=${RELEASE_VERSION}" >> $GITHUB_ENV

      # - name: Pre-run checks
      #   run: node release/prePublishWorkflowChecks.js

      # - name: Build dist
      #   run: |
      #     npm install
      #     npm run build:all

      # - name: Tag commit
      #   run: |
      #     git tag $RELEASE_VERSION -m "Release ${RELEASE_VERSION}"
      #     git push $RELEASE_VERSION

      # - name: Determine release type
      #   run: |
      #     GIT_TAG_REGEX="^[0-9]\{1,3\}\.[0-9]\{1,2\}\.[0-9]\{1,2\}$"
      #     LATEST_TAG=`git tag | grep $GIT_TAG_REGEX | sort -t. -k 1,1n -k 2,2n -k 3,3n -k 4,4n | sed '1!G;h;$!d' | sed -n 1p`
      #     echo "LATEST_TAG=${LATEST_TAG}" >> $GITHUB_ENV
      #     echo Latest version is $LATEST_TAG

      # # - name: Upload Base32 to S3
      # #   run: |
      # #     aws s3 cp ./dist s3://${{ AWS_S3_BUCKET }}/web-sdk-base32-releases/$BASE_32_VERSION/ --exclude "*.html" --recursive --acl public-read

      # # - name: Upload Release to S3
      # #   run: |
      # #     aws s3 cp ./dist s3://${{ AWS_S3_BUCKET }}/web-sdk-releases/$VERSION/ --exclude "*.html" --recursive --acl public-read

      # # TODO: Remove --dry-run when ready to test with prod
      # - name: Publish to NPM
      #   env:
      #     NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}
      #   run: |
      #     if [ $NPM_PUBLISH_TAG ]
      #     then
      #       npm publish --dry-run --tag $NPM_PUBLISH_TAG
      #     else
      #       npm publish --dry-run
      #     fi

      # - name: Extract release notes from CHANGELOG
      #   id: extract-release-notes
      #   uses: ffurrer2/extract-release-notes@v1

      # - name: Create Github Release
      #   uses: ncipollo/release-action@v1
      #   with:
      #     token: ${{ secrets.GITHUB_TOKEN }}
      #     body: ${{ steps.extract-release-notes.outputs.release_notes }}

      # # FIXME: Temporarily disabled to allow release build to pass. To be fixed in CX-6470
      # # - name: Send artifacts to Sentry
      # #   env:
      # #     SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
      # #   run: |
      # #     curl -sL https://sentry.io/get-cli/ | bash
      # #     sentry-cli --auth-token $SENTRY_AUTH_TOKEN
      # #     sentry-cli releases new $LATEST_TAG --log-level=DEBUG
      # #     sentry-cli releases files $LATEST_TAG upload-sourcemaps ./dist/

      # - name: Run build for Surge
      #   # Legacy: Surge uses the NODE_ENV=test + TEST_ENV=deployment
      #   run: |
      #     if [ "$VERSION" == "$LATEST_TAG" ]
      #     then
      #       TEST_ENV=deployment npm run build:test
      #     fi

      # - name: Publish latest version to Surge
      #   if: ${{ env.VERSION == env.LATEST_TAG }}
      #   uses: dswistowski/surge-sh-action@v1.0.1
      #   with:
      #     domain: 'https://latest-onfido-sdk-ui-onfido.surge.sh'
      #     project: './dist/'
      #     login: ${{ secrets.SURGE_LOGIN }}
      #     token: ${{ secrets.SURGE_TOKEN }}

      # - name: Publish to Surge
      #   uses: dswistowski/surge-sh-action@v1.0.1
      #   with:
      #     domain: "https://${{ env.RELEASE_VERSION }}-onfido-sdk-ui-onfido.surge.sh"
      #     project: './dist'
      #     login: ${{ secrets.SURGE_LOGIN }}
      #     token: ${{ secrets.SURGE_TOKEN }}

      # # Post release workflow
      # - name: Post-release checks
      #   uses: actions/github-script@v6
      #   with:
      #     script: |
      #       require('./release/postReleaseFlow.js')(github, context)

      # # TODO: test before run in prod somehow.
      # - name: Update demo app
      #   run: node release/updateDemoApp.js

      # # TODO: test
      # # - name: Create master to development PR
      # #   run: |
      # #     git checkout master
      # #     git fetch
      # #     git checkout -b post-release/merge-${{ env.RELEASE_VERSION }}-to-development
      # #     git push origin HEAD

      # # - name: Next steps
      #   # PR message with tag the user, explain next steps: Merge PR, merge master into development by PR (automate?)